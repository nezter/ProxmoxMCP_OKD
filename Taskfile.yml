# yaml-language-server: $schema=https://taskfile.dev/schema.json
# Taskfile for ProxmoxMCP
# Documentation: https://taskfile.dev/
version: "3"

vars:
  PYTHON_VERSION: "3.12"
  UV_EXTRA: "dev"

env:
  PYTHONPATH: "src:{{.PYTHONPATH}}"

tasks:
  # Default task
  default:
    desc: Show available tasks
    cmds:
      - task --list-all
    silent: true

  # Development environment setup
  setup:
    desc: Install dependencies and sync development environment
    cmds:
      - echo "üì¶ Installing ProxmoxMCP dependencies..."
      - uv sync --extra {{.UV_EXTRA}}
      - echo "‚úÖ Dependencies installed and synced!"
      - echo "‚ÑπÔ∏è  To prepare for development server, run task dev setup"

  # YAML linting tasks
  yaml:lint:
    desc: Lint all YAML files
    cmds:
      - ./scripts/yaml-lint.sh
    sources:
      - "**/*.yml"
      - "**/*.yaml"
      - ".yamllint.yml"
    generates:
      - .task/yaml-lint-{{.CHECKSUM}}

  yaml:fix:
    desc: Show detailed YAML linting issues
    cmds:
      - ./scripts/yaml-lint.sh --fix

  yaml:check:
    desc: Check YAML files (strict mode - exits with error)
    cmds:
      - ./scripts/yaml-lint.sh --check

  # Markdown linting and formatting tasks
  markdown:lint:
    desc: Lint all Markdown files
    cmds:
      - markdownlint-cli2 "**/*.md"
    sources:
      - "**/*.md"
      - ".markdownlint.jsonc"
    generates:
      - .task/markdown-lint-{{.CHECKSUM}}

  markdown:fix:
    desc: Auto-fix Markdown formatting issues
    cmds:
      - markdownlint-cli2 --fix "**/*.md"
    sources:
      - "**/*.md"
      - ".markdownlint.jsonc"

  markdown:check:
    desc: Check Markdown files (strict mode - exits with error)
    cmds:
      - markdownlint-cli2 "**/*.md" --config .markdownlint.jsonc

  markdown:summary:
    desc: Show summary of Markdown issues across all files
    cmds:
      - echo "üìù Markdown Linting Summary"
      - echo "============================"
      - markdownlint-cli2 "**/*.md" || true
      - echo ""
      - echo "üí° Run 'task markdown:fix' to auto-fix issues"

  # Python code quality tasks
  format:
    desc: Format Python code with black
    cmds:
      - uv run black .
    sources:
      - "**/*.py"
    generates:
      - .task/format-{{.CHECKSUM}}

  format:check:
    desc: Check Python code formatting
    cmds:
      - uv run black . --check --diff

  format:fix:
    desc: Auto-fix Python code formatting (alias for format)
    cmds:
      - task: format

  lint:
    desc: Lint Python code with ruff
    cmds:
      - uv run ruff check .

  lint:check:
    desc: Check Python code linting (alias for lint)
    cmds:
      - task: lint

  lint:fix:
    desc: Lint and auto-fix Python code with ruff
    cmds:
      - uv run ruff check . --fix

  type:check:
    desc: Run mypy type checking
    cmds:
      - uv run mypy .

  # Testing tasks
  test:
    desc: Run all tests
    cmds:
      - uv run pytest -v

  test:watch:
    desc: Run tests in watch mode
    cmds:
      - uv run pytest-watch

  test:coverage:
    desc: Run tests with coverage report
    cmds:
      - uv run pytest --cov=src --cov-report=html --cov-report=term

  # ProxmoxMCP-specific validation tasks
  config:validate:
    desc: Validate ProxmoxMCP configuration loading
    cmds:
      - echo "üîß Validating ProxmoxMCP configuration..."
      - |
        if [ -f "proxmox-config/config.json" ]; then
          export PROXMOX_MCP_CONFIG="proxmox-config/config.json"
          uv run python -c "from proxmox_mcp.config.loader import load_config; load_config(); print('‚úÖ Configuration loaded successfully')"
        else
          echo "‚ÑπÔ∏è  No config file found at proxmox-config/config.json - skipping config validation"
          echo "‚ÑπÔ∏è  In production, ensure config file exists and PROXMOX_MCP_CONFIG is set"
        fi

  mcp:validate:
    desc: Validate MCP server startup
    cmds:
      - echo "üîå Validating MCP server startup..."
      - |
        echo "‚ÑπÔ∏è  Testing MCP server module import..."
        uv run python -c "from proxmox_mcp.server import ProxmoxMCPServer; print('‚úÖ MCP server module imported successfully')"

  deps:check:
    desc: Check dependency consistency
    cmds:
      - echo "üì¶ Checking dependency consistency..."
      - uv pip check

  # Security validation tasks
  security:validate:
    desc: Run security validation checklist
    cmds:
      - echo "üîí Running security validation..."
      - echo "Checking for hardcoded secrets..."
      - |
        # Check for actual hardcoded secrets, excluding legitimate variable names and examples
        if grep -r -E "(password|token|key|secret)\s*=\s*['\"][^'\"]{8,}['\"]" src/ --exclude-dir=tests --exclude-dir=__pycache__ 2>/dev/null | grep -v -E "(token_value|token_name|key_str|master_key|env_key)" | grep -v "my-secret-token"; then
          echo "‚ùå Potential hardcoded secrets found"
          exit 1
        else
          echo "‚úÖ No hardcoded secrets detected"
        fi
      - echo "Validating SSL configuration..."
      - |
        uv run python -c "
        try:
            from proxmox_mcp.config.loader import load_config
            config = load_config()
            if hasattr(config, 'verify_ssl') and not config.verify_ssl:
                print('‚ùå SSL verification disabled')
                exit(1)
            print('‚úÖ SSL verification enabled')
        except Exception as e:
            print(f'‚ÑπÔ∏è  SSL validation skipped: {e}')
        " || echo "‚ÑπÔ∏è  SSL validation skipped (config not available)"

  

  # 3-Phase QA Pipeline (following CLAUDE.md)
  qa:phase1:
    desc: "Phase 1: Core Quality Checks (parallel execution)"
    deps:
      - format:check
      - lint
      - type:check
      - test

  qa:phase2:
    desc: "Phase 2: ProxmoxMCP-Specific Validation"
    deps:
      - config:validate
      - mcp:validate
      - deps:check

  qa:phase3:
    desc: "Phase 3: Security and Integration Validation"
    deps:
      - security:validate

  qa:comprehensive:
    desc: Complete CLAUDE.md quality assurance workflow
    deps:
      - qa:phase1
      - qa:phase2  
      - qa:phase3
    cmds:
      - echo "üöÄ ProxmoxMCP Quality Assurance Pipeline Complete"
      - echo "‚úÖ All quality assurance checks passed!"
      - echo "üéâ Code is ready for commit"

  # Error recovery and diagnostic tasks
  qa:recovery:
    desc: Run QA with error recovery procedures
    cmds:
      - echo "üîß Running QA with error recovery..."
      - echo "If tests fail, run - task test debug"
      - echo "If formatting fails, run - task format fix"
      - echo "If linting fails, run - task lint fix"
      - echo "If type checking fails, run - task type debug"
      - |
        task qa:comprehensive || echo "‚ùå QA failed - see recovery procedures above"

  test:debug:
    desc: Debug test failures with detailed output
    cmds:
      - echo "üêõ Running tests with detailed failure information..."
      - uv run pytest -v --tb=short

  type:debug:
    desc: Debug mypy type checking issues
    cmds:
      - echo "üîç Running mypy with detailed error information..."
      - uv run mypy . --show-error-codes --show-error-context

  qa:status:
    desc: Show current QA status for all checks
    cmds:
      - echo "üìä ProxmoxMCP QA Status Report"
      - echo "================================"
      - echo "Format check:" && (task format:check > /dev/null 2>&1 && echo "‚úÖ PASS" || echo "‚ùå FAIL")
      - echo "Lint check:" && (task lint > /dev/null 2>&1 && echo "‚úÖ PASS" || echo "‚ùå FAIL") 
      - echo "Type check:" && (task type:check > /dev/null 2>&1 && echo "‚úÖ PASS" || echo "‚ùå FAIL")
      - echo "Tests:" && (task test > /dev/null 2>&1 && echo "‚úÖ PASS" || echo "‚ùå FAIL")
      - echo "Config:" && (task config:validate > /dev/null 2>&1 && echo "‚úÖ PASS" || echo "‚ùå FAIL")
      - echo "Dependencies:" && (task deps:check > /dev/null 2>&1 && echo "‚úÖ PASS" || echo "‚ùå FAIL")

  # Legacy check task for backward compatibility
  check:
    desc: Run all code quality checks (legacy - use qa:comprehensive)
    deps:
      - format:check
      - lint
      - type:check
      - yaml:check
      - markdown:check

  fix:
    desc: Auto-fix all fixable issues (Python + YAML + Markdown)
    cmds:
      - task: format
      - task: lint:fix
      - task: yaml:autofix
      - task: markdown:fix

  yaml:autofix:
    desc: Auto-fix YAML spacing issues (trailing spaces, newlines, etc.)
    cmds:
      - ./scripts/yaml-autofix.sh
    sources:
      - "**/*.yml"
      - "**/*.yaml"
    generates:
      - .task/yaml-autofix-{{.CHECKSUM}}

  yaml:check-fixes:
    desc: Check which YAML files need auto-fixing
    cmds:
      - echo "Running yamllint to show remaining issues..."
      - ./scripts/yaml-lint.sh --fix || true

  # Safe YAML and Markdown validation (non-failing)
  docs:check:
    desc: Check documentation formatting (non-failing)
    cmds:
      - echo "üìÑ Checking documentation formatting..."
      - echo "YAML files:"
      - ./scripts/yaml-lint.sh || echo "‚ÑπÔ∏è  YAML issues found - run 'task yaml:autofix' to fix"
      - echo "Markdown files:"
      - markdownlint-cli2 "**/*.md" || echo "‚ÑπÔ∏è  Markdown issues found - run 'task markdown:fix' to attempt fixes"
      - echo "‚ÑπÔ∏è  Documentation checks completed (issues are informational only)"

  # Legacy alias - keeping for backward compatibility
  autofix:
    desc: Auto-fix YAML files (alias for yaml:autofix)
    cmds:
      - task: yaml:autofix

  # Pre-commit style checks (focused on code quality)
  pre-commit:
    desc: Run essential pre-commit checks (code quality focused)
    cmds:
      - echo "üîÑ Running essential pre-commit checks..."
      - echo "üìù Auto-fixing Python code..."
      - task: format
      - task: lint:fix
      - echo "üîç Running core validation..."
      - task: qa:phase1
      - echo "‚úÖ Essential pre-commit checks passed!"
      - echo "‚ÑπÔ∏è  For full validation, run task qa comprehensive"

  # Comprehensive pre-commit (includes docs)
  pre-commit:full:
    desc: Run comprehensive pre-commit with all validations
    cmds:
      - echo "üîÑ Running comprehensive pre-commit with auto-fixes..."
      - task: format
      - task: lint:fix
      - echo "üîç Running full validation pipeline..."
      - task: qa:comprehensive
      - echo "‚úÖ Comprehensive pre-commit checks passed!"

  # CI simulation
  ci:
    desc: Run CI checks locally (full comprehensive QA)
    cmds:
      - echo "üöÄ Running CI checks locally..."
      - task: qa:comprehensive
      - echo "‚úÖ All CI checks passed!"

  # Development server tasks
  dev:
    desc: Start ProxmoxMCP development server
    cmds:
      - echo "üöÄ Starting ProxmoxMCP development server..."
      - |
        if [ -f "proxmox-config/config.json" ]; then
          echo "Using config file: proxmox-config/config.json"
          export PROXMOX_MCP_CONFIG="proxmox-config/config.json"
          uv run python -m proxmox_mcp.server
        else
          echo "‚ùå No config file found at proxmox-config/config.json"
          echo "üìù To set up the development server:"
          echo "   1. Create config directory: mkdir -p proxmox-config"
          echo "   2. Copy example config: cp proxmox-config/config.example.json proxmox-config/config.json"
          echo "   3. Edit config.json with your Proxmox credentials"
          echo "   4. Run: task dev"
          exit 1
        fi

  # Environment setup with server preparation
  dev:setup:
    desc: Set up development environment and prepare for server
    deps: [setup]
    cmds:
      - echo "üîß Preparing development server environment..."
      - mkdir -p proxmox-config
      - |
        if [ ! -f "proxmox-config/config.json" ] && [ -f "proxmox-config/config.example.json" ]; then
          echo "üìù Creating config template..."
          cp proxmox-config/config.example.json proxmox-config/config.json
          echo "‚úÖ Config template created at proxmox-config/config.json"
          echo "‚ö†Ô∏è  Please edit config.json with your Proxmox credentials before running 'task dev'"
        elif [ -f "proxmox-config/config.json" ]; then
          echo "‚úÖ Development environment ready - config file exists"
          echo "üöÄ Run 'task dev' to start the server"
        else
          echo "‚ÑπÔ∏è  No example config found - you'll need to create proxmox-config/config.json manually"
        fi

  # Dependency management
  deps:update:
    desc: Update dependencies
    cmds:
      - uv sync --upgrade
      - echo "‚úÖ Dependencies updated!"

  deps:lock:
    desc: Update lock file
    cmds:
      - uv lock
      - echo "‚úÖ Lock file updated!"

  

  # Cleanup tasks
  clean:
    desc: Clean up generated files
    cmds:
      - rm -rf .pytest_cache/
      - rm -rf .mypy_cache/
      - rm -rf .ruff_cache/
      - rm -rf htmlcov/
      - rm -rf dist/
      - rm -rf build/
      - rm -rf *.egg-info/
      - find . -type d -name __pycache__ -exec rm -rf {} +
      - find . -type f -name "*.pyc" -delete
      - echo "‚úÖ Cleanup completed!"

  clean:all:
    desc: Deep clean including virtual environment
    deps: [clean]
    cmds:
      - rm -rf .venv/
      - rm -rf .task/
      - echo "‚úÖ Deep cleanup completed!"

  # Documentation tasks
  docs:serve:
    desc: Serve documentation locally
    cmds:
      - echo "üìö Serving documentation..."
      - python -m http.server 8000 -d docs/

  # Release tasks
  build:
    desc: Build package for distribution
    cmds:
      - uv build

  # Git hooks integration
  hooks:install:
    desc: Install git hooks (if using pre-commit)
    cmds:
      - echo "Installing git hooks..."
      - |
        if command -v pre-commit >/dev/null 2>&1; then
          pre-commit install
        else
          echo "‚ö†Ô∏è  pre-commit not found. Install with: pip install pre-commit"
        fi

  # Utility tasks
  info:
    desc: Show project information
    cmds:
      - echo "üìã ProxmoxMCP Project Information"
      - echo "=================================="
      - echo "Python version:" {{.PYTHON_VERSION}}
      - echo "UV version:" && uv --version
      - echo "Project root:" && pwd
      - echo "Virtual env:" && uv run python -c 'import sys; print(sys.executable)'
      - echo ""
      - echo "üîß Available tasks:"
      - task --list-all

  # Quick development workflow
  quick:
    desc: Quick development check (Phase 1 QA only)
    cmds:
      - echo "‚ö° Running quick development checks..."
      - task: format
      - task: lint:fix
      - task: qa:phase1
      - echo "‚úÖ Quick check completed!"


  # ==========================================
  # Branch Management Tasks
  # ==========================================

  # Interactive branch creation
  branch:
    desc: Create a new branch interactively
    cmds:
      - echo "üåø Creating new branch interactively..."
      - ./scripts/branch-templates/interactive.sh

  # Quick branch creation shortcuts
  branch:feature:
    desc: Create a feature branch
    cmds:
      - echo "üöÄ Creating feature branch..."
      - ./scripts/branch-templates/feature.sh {{.CLI_ARGS}}

  branch:fix:
    desc: Create a fix branch
    cmds:
      - echo "üêõ Creating fix branch..."
      - ./scripts/branch-templates/fix.sh {{.CLI_ARGS}}

  branch:security:
    desc: Create a security branch
    cmds:
      - echo "üîí Creating security branch..."
      - ./scripts/branch-templates/security.sh {{.CLI_ARGS}}

  # Branch validation and management
  branch:validate:
    desc: Validate current branch name
    cmds:
      - echo "üîç Validating branch name..."
      - ./scripts/branch-templates/validate.sh

  branch:status:
    desc: Show current branch and git status
    cmds:
      - echo "üìä Current branch and status:"
      - git branch --show-current
      - git status --porcelain

  # Development workflows
  work:start:
    desc: Start working on a new issue (create branch + setup)
    cmds:
      - echo "üéØ Starting work on new issue..."
      - task: branch
      - task: setup

  work:finish:
    desc: Finish current work (checks + PR guidance)
    cmds:
      - echo "üèÅ Finishing current work..."
      - task: check
      - task: branch:validate
      - echo "üöÄ Ready for PR! Push with git push"
